{"version":3,"sources":["Sidebar.js","Header.js","App.js","utils.js","serviceWorker.js","index.js"],"names":["Sidebar","_this","this","react_default","a","createElement","id","className","onClick","props","closeSearch","placeholder","aria-label","onChange","e","filterVenues","target","value","venues","length","filter","venue","name","toLowerCase","includes","query","map","index","tabIndex","key","animateList","location","address","icon","Component","Header","openSearch","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","setMapMarkers","googleMapsPromise","Promise","resolve","reject","window","resolveGoogleMapsPromise","google","script","document","src","async","body","appendChild","loadPlacesPromise","fetch","then","resp","ok","json","Error","all","values","response","console","log","markers","infoWindow","maps","InfoWindow","Map","getElementById","zoom","scrollwheel","center","lat","lng","forEach","marker","Marker","position","animation","Animation","DROP","infoDisp","formattedAddress","addListener","getAnimation","setAnimation","BOUNCE","setTimeout","event","setContent","setCenter","open","push","setState","m","setVisible","querySelector","style","display","state","src_Header","role","src_Sidebar","Boolean","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2341d3e3.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass Sidebar extends Component {\n\n\n\n\trender() {\n\t\treturn(\n\t\t\t<div id=\"sidebar\">\n\t\t\t  <div className=\"search-top\">\n\t\t\t\t<button className=\"search-close\" onClick={() => {this.props.closeSearch()}}>Close</button>\n\t\t\t\t<h2 className=\"search-title\">Search Coffee Locations</h2>\n\t\t\t\t<input className=\"search-bar\" placeholder=\"search for coffee shops\" aria-label=\"search locations\" onChange={(e) => { this.props.filterVenues(e.target.value) }}/>\n\t\t\t  </div>\n\t\t\t  <div className=\"search-list\">\n\t\t\t\t<ul className=\"sidebar-venue-list\" >\n\t\t\t\t{this.props.venues && this.props.venues.length > 0 && this.props.venues.filter(venue => venue.name.toLowerCase().includes(this.props.query.toLowerCase())).map((venue, index) => (\n\t\t\t\t\t<li className=\"sidebar-venue-item\" tabIndex=\"0\" key={index} onClick={() => { this.props.animateList(venue) }} >\n\t\t\t\t\t{venue.name}\n\t\t\t\t\t<br />\n\t\t\t\t\t{venue.location.address}\n\t\t\t\t\t<br />\n\t\t\t\t\t{venue.icon}\n\t\t\t\t\t</li>\n\t\t\t\t\t))}\n\t\t\t\t</ul>\n\t\t\t  </div>\n\t\t\t</div>\n\t\t\t)\n\t}\n}\n\nexport default Sidebar","import React, { Component } from 'react';\nimport './App.css';\n\nclass Header extends Component {\n\n\trender() {\n\t\treturn(\n\t\t\t<header className=\"header\">\n\t\t\t\t<h1 className=\"app-title\">St. Pete Coffee</h1>\n\t\t\t\t<button className=\"search-open\" onClick={() => {this.props.openSearch()}}>Search</button>\n\t\t\t</header>\n\t\t\t)\n\t}\n\n}\n\n\texport default Header","import React, { Component } from 'react';\nimport './App.css';\nimport Sidebar from './Sidebar.js'\nimport Header from './Header.js'\n\nimport { load_google_maps, load_places } from './utils.js'\n\n//Ryan Waite's walkthrough https://www.youtube.com/watch?v=5J6fs_BlVC0 to get the map in directly and add markers\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      query : '', \n      venues : []\n    }\n  }\n\n\nsetMapMarkers = () => {\n  let googleMapsPromise = load_google_maps();\n    let loadPlacesPromise = load_places();\n\n    Promise.all([\n      googleMapsPromise,\n      loadPlacesPromise\n      ])\n      .then(values => {\n        let google = values[0];\n        let venues = values[1].response.venues;\n\n        console.log(venues)\n        \n        this.google = google;\n        this.markers = [];\n        this.infoWindow = new google.maps.InfoWindow();\n        this.map = new google.maps.Map(document.getElementById('map'), {\n          zoom: 12,\n          scrollwheel: true,\n          center: { lat: venues[0].location.lat, lng: venues[0].location.lng }\n        })\n\n        venues.forEach(venue => { \n          let marker = new google.maps.Marker({\n            position: { lat: venue.location.lat, lng: venue.location.lng },\n            map: this.map,\n            venue: venue,\n            id: venue.id,\n            name: venue.name,\n            animation: google.maps.Animation.DROP\n          });\n\n        let infoDisp = '<div class=\"info-disp\">' +\n          '<h4>' + venue.name + '</h4>' +\n          '<p>' + venue.location.formattedAddress + '</p>' +\n          '</div>'\n\n         marker.addListener('click', () => {\n          marker.getAnimation() !== null ? \n            marker.setAnimation(null) : marker.setAnimation(google.maps.Animation.BOUNCE)\n              setTimeout(() => marker.setAnimation(null), 1500)\n        })\n\n         google.maps.event.addListener(marker, 'click', () => {\n          this.infoWindow.setContent(infoDisp);\n          this.map.setCenter(marker.position);\n          this.infoWindow.open(this.map, marker);\n         })\n\n          this.markers.push(marker);\n        })\n\n        this.setState({ venues })\n      })\n}\n//get map, set markers, filter venues with query\n  componentDidMount() {\n    this.setMapMarkers();\n  }\n\n  animateList = (venue) => {\n    let marker = this.markers.filter(m => m.venue.id === venue.id)[0];\n    this.infoWindow.setContent(marker.name);\n    this.map.setCenter(marker.position);\n    this.infoWindow.open(this.map, marker);\n\n    marker.getAnimation() !== null ? \n            marker.setAnimation(null) : marker.setAnimation(window.google.maps.Animation.BOUNCE)\n              setTimeout(() => marker.setAnimation(null), 1500)\n  }\n\n  filterVenues = (query) => {\n    this.markers.forEach(marker => {\n      marker.name.toLowerCase().includes(query.toLowerCase()) === true ?\n        marker.setVisible(true) : marker.setVisible(false);\n    })\n\n\n    this.setState({ query });\n  }\n\n  openSearch = () => {\n    const sideDisp = document.querySelector('#sidebar');\n    sideDisp.style.display = 'block';\n  }\n\n  closeSearch = () => {\n    const sideDisp = document.querySelector('#sidebar');\n    sideDisp.style.display = 'none';\n  }\n\n  render() {\n\n    return (\n      <main className=\"main\">\n        <Header openSearch={this.openSearch} />\n        <div id=\"map\" role=\"application\" aria-label=\"Google Map\" ></div>\n        <Sidebar venues={this.state.venues}\n          query={this.state.query}\n          filterVenues={this.filterVenues} \n          animateList={this.animateList} \n          closeSearch={this.closeSearch}\n          />\n        <footer className=\"footer\">\n          <p>Created using FourSquare API and React</p>\n        </footer>\n      </main>\n    );\n  }\n}\n\nexport default App;","//Ryan Waite's walkthrough https://www.youtube.com/watch?v=5J6fs_BlVC0\n\nexport function load_google_maps() {\n\treturn new Promise(function(resolve, reject) {\n\t\t//define global callback that will return when map loads\n\t\twindow.resolveGoogleMapsPromise = function () {\n\t\t\t//resolve global obj \n\t\t\tresolve(window.google);\n\t\t\t//delete global callback to tidy after not needed\n\t\t\tdelete window.resolveGoogleMapsPromise;\n\t\t}\n\t\t//Load Google Maps API\n\t\tconst script = document.createElement(\"script\");\n\t\tscript.src = 'https://maps.googleapis.com/maps/api/js?libraries=places&key=AIzaSyBqfFulVdCVgTQv_hUCq6vRZlaBTHOGbqg&callback=resolveGoogleMapsPromise';\n\t\tscript.async = true;\n\t\tdocument.body.appendChild(script);\n\n\t})\n}\n\nexport function load_places() {\n\tlet apiURL = 'https://api.foursquare.com/v2/venues/search?client_id=1NPLIXKCBYIMLDOVGKBVAJQDMMSSSNVKVPFUKVMAO2M3YXUR&client_secret=AJS5HHGWH3IL4EL1XUC2I3Q3OUAN1U0SEUYB1FUC2UK2ZCBT&ll=27.772,-82.664&query=coffee&v=20181019';\n\treturn fetch(apiURL).then(resp => {if(resp.ok) {\n          return resp.json();\n        } else {\n          throw new Error('Error getting data');\n        }\n      })\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.register().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}